<?php
/**
 * SchemaApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@sajari.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sajari\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Sajari\ApiException;
use Sajari\Configuration;
use Sajari\HeaderSelector;
use Sajari\ObjectSerializer;

/**
 * SchemaApi Class Doc Comment
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SchemaApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * The value to use for the Sajari-Client-User-Agent header
     *
     * @var string
     */
    protected $clientUserAgent;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;

        $composer = json_decode(
            file_get_contents(dirname(__FILE__) . "/../../composer.json"),
            true
        );

        $clientUserAgent = "sajari-sdk-php";
        if ($composer["version"]) {
            $clientUserAgent = $clientUserAgent . "/" . $composer["version"];
        }
        $this->clientUserAgent = $clientUserAgent;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation batchCreateSchemaFields
     *
     * Batch create schema fields
     *
     * @param  string $collection_id The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\BatchCreateSchemaFieldsRequest $batch_create_schema_fields_request batch_create_schema_fields_request (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\BatchCreateSchemaFieldsResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function batchCreateSchemaFields(
        $collection_id,
        $batch_create_schema_fields_request
    ) {
        list($response) = $this->batchCreateSchemaFieldsWithHttpInfo(
            $collection_id,
            $batch_create_schema_fields_request
        );
        return $response;
    }

    /**
     * Operation batchCreateSchemaFieldsWithHttpInfo
     *
     * Batch create schema fields
     *
     * @param  string $collection_id The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\BatchCreateSchemaFieldsRequest $batch_create_schema_fields_request (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\BatchCreateSchemaFieldsResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchCreateSchemaFieldsWithHttpInfo(
        $collection_id,
        $batch_create_schema_fields_request
    ) {
        $request = $this->batchCreateSchemaFieldsRequest(
            $collection_id,
            $batch_create_schema_fields_request
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if (
                        "\Sajari\Model\BatchCreateSchemaFieldsResponse" ===
                        "\SplFileObject"
                    ) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\BatchCreateSchemaFieldsResponse",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\BatchCreateSchemaFieldsResponse";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\BatchCreateSchemaFieldsResponse",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchCreateSchemaFieldsAsync
     *
     * Batch create schema fields
     *
     * @param  string $collection_id The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\BatchCreateSchemaFieldsRequest $batch_create_schema_fields_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchCreateSchemaFieldsAsync(
        $collection_id,
        $batch_create_schema_fields_request
    ) {
        return $this->batchCreateSchemaFieldsAsyncWithHttpInfo(
            $collection_id,
            $batch_create_schema_fields_request
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation batchCreateSchemaFieldsAsyncWithHttpInfo
     *
     * Batch create schema fields
     *
     * @param  string $collection_id The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\BatchCreateSchemaFieldsRequest $batch_create_schema_fields_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchCreateSchemaFieldsAsyncWithHttpInfo(
        $collection_id,
        $batch_create_schema_fields_request
    ) {
        $returnType = "\Sajari\Model\BatchCreateSchemaFieldsResponse";
        $request = $this->batchCreateSchemaFieldsRequest(
            $collection_id,
            $batch_create_schema_fields_request
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchCreateSchemaFields'
     *
     * @param  string $collection_id The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\BatchCreateSchemaFieldsRequest $batch_create_schema_fields_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function batchCreateSchemaFieldsRequest(
        $collection_id,
        $batch_create_schema_fields_request
    ) {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling batchCreateSchemaFields'
            );
        }
        // verify the required parameter 'batch_create_schema_fields_request' is set
        if (
            $batch_create_schema_fields_request === null ||
            (is_array($batch_create_schema_fields_request) &&
                count($batch_create_schema_fields_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_create_schema_fields_request when calling batchCreateSchemaFields'
            );
        }

        $resourcePath =
            "/v4/collections/{collection_id}/schemaFields:batchCreate";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                ["application/json"]
            );
        }

        // for model (json/xml)
        if (isset($batch_create_schema_fields_request)) {
            if ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $batch_create_schema_fields_request
                    )
                );
            } else {
                $httpBody = $batch_create_schema_fields_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "POST",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSchemaField
     *
     * Create schema field
     *
     * @param  string $collection_id The collection to create a schema field in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\SchemaField $schema_field The schema field to create. (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\SchemaField|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function createSchemaField($collection_id, $schema_field)
    {
        list($response) = $this->createSchemaFieldWithHttpInfo(
            $collection_id,
            $schema_field
        );
        return $response;
    }

    /**
     * Operation createSchemaFieldWithHttpInfo
     *
     * Create schema field
     *
     * @param  string $collection_id The collection to create a schema field in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\SchemaField $schema_field The schema field to create. (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\SchemaField|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSchemaFieldWithHttpInfo($collection_id, $schema_field)
    {
        $request = $this->createSchemaFieldRequest(
            $collection_id,
            $schema_field
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ("\Sajari\Model\SchemaField" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\SchemaField",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\SchemaField";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\SchemaField",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSchemaFieldAsync
     *
     * Create schema field
     *
     * @param  string $collection_id The collection to create a schema field in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\SchemaField $schema_field The schema field to create. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSchemaFieldAsync($collection_id, $schema_field)
    {
        return $this->createSchemaFieldAsyncWithHttpInfo(
            $collection_id,
            $schema_field
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createSchemaFieldAsyncWithHttpInfo
     *
     * Create schema field
     *
     * @param  string $collection_id The collection to create a schema field in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\SchemaField $schema_field The schema field to create. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSchemaFieldAsyncWithHttpInfo(
        $collection_id,
        $schema_field
    ) {
        $returnType = "\Sajari\Model\SchemaField";
        $request = $this->createSchemaFieldRequest(
            $collection_id,
            $schema_field
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSchemaField'
     *
     * @param  string $collection_id The collection to create a schema field in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\SchemaField $schema_field The schema field to create. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSchemaFieldRequest($collection_id, $schema_field)
    {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling createSchemaField'
            );
        }
        // verify the required parameter 'schema_field' is set
        if (
            $schema_field === null ||
            (is_array($schema_field) && count($schema_field) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema_field when calling createSchemaField'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}/schemaFields";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                ["application/json"]
            );
        }

        // for model (json/xml)
        if (isset($schema_field)) {
            if ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($schema_field)
                );
            } else {
                $httpBody = $schema_field;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "POST",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSchemaFields
     *
     * List schema fields
     *
     * @param  string $collection_id The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;. (required)
     * @param  int $page_size The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param  string $page_token A page token, received from a previous [ListSchemaFields](/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\ListSchemaFieldsResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function listSchemaFields(
        $collection_id,
        $page_size = null,
        $page_token = null
    ) {
        list($response) = $this->listSchemaFieldsWithHttpInfo(
            $collection_id,
            $page_size,
            $page_token
        );
        return $response;
    }

    /**
     * Operation listSchemaFieldsWithHttpInfo
     *
     * List schema fields
     *
     * @param  string $collection_id The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;. (required)
     * @param  int $page_size The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param  string $page_token A page token, received from a previous [ListSchemaFields](/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\ListSchemaFieldsResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSchemaFieldsWithHttpInfo(
        $collection_id,
        $page_size = null,
        $page_token = null
    ) {
        $request = $this->listSchemaFieldsRequest(
            $collection_id,
            $page_size,
            $page_token
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if (
                        "\Sajari\Model\ListSchemaFieldsResponse" ===
                        "\SplFileObject"
                    ) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\ListSchemaFieldsResponse",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\ListSchemaFieldsResponse";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\ListSchemaFieldsResponse",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSchemaFieldsAsync
     *
     * List schema fields
     *
     * @param  string $collection_id The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;. (required)
     * @param  int $page_size The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param  string $page_token A page token, received from a previous [ListSchemaFields](/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSchemaFieldsAsync(
        $collection_id,
        $page_size = null,
        $page_token = null
    ) {
        return $this->listSchemaFieldsAsyncWithHttpInfo(
            $collection_id,
            $page_size,
            $page_token
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation listSchemaFieldsAsyncWithHttpInfo
     *
     * List schema fields
     *
     * @param  string $collection_id The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;. (required)
     * @param  int $page_size The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param  string $page_token A page token, received from a previous [ListSchemaFields](/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSchemaFieldsAsyncWithHttpInfo(
        $collection_id,
        $page_size = null,
        $page_token = null
    ) {
        $returnType = "\Sajari\Model\ListSchemaFieldsResponse";
        $request = $this->listSchemaFieldsRequest(
            $collection_id,
            $page_size,
            $page_token
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSchemaFields'
     *
     * @param  string $collection_id The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;. (required)
     * @param  int $page_size The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param  string $page_token A page token, received from a previous [ListSchemaFields](/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSchemaFieldsRequest(
        $collection_id,
        $page_size = null,
        $page_token = null
    ) {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling listSchemaFields'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}/schemaFields";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        if ($page_size !== null) {
            if ("form" === "form" && is_array($page_size)) {
                foreach ($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["page_size"] = $page_size;
            }
        }
        // query params
        if ($page_token !== null) {
            if ("form" === "form" && is_array($page_token)) {
                foreach ($page_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["page_token"] = $page_token;
            }
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "GET",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen(
                $this->config->getDebugFile(),
                "a"
            );
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException(
                    "Failed to open the debug file: " .
                        $this->config->getDebugFile()
                );
            }
        }

        return $options;
    }
}
