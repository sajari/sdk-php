<?php
/**
 * PipelinesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@sajari.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sajari\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Sajari\ApiException;
use Sajari\Configuration;
use Sajari\HeaderSelector;
use Sajari\ObjectSerializer;

/**
 * PipelinesApi Class Doc Comment
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PipelinesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * The value to use for the Sajari-Client-User-Agent header
     *
     * @var string
     */
    protected $clientUserAgent;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;

        $composer = json_decode(
            file_get_contents(dirname(__FILE__) . "/../../composer.json"),
            true
        );

        $clientUserAgent = "sajari-sdk-php";
        if ($composer["version"]) {
            $clientUserAgent = $clientUserAgent . "/" . $composer["version"];
        }
        $this->clientUserAgent = $clientUserAgent;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPipeline
     *
     * Create pipeline
     *
     * @param  string $collection_id The collection to create the pipeline in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Pipeline $pipeline The pipeline to create. (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\Pipeline|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function createPipeline($collection_id, $pipeline)
    {
        list($response) = $this->createPipelineWithHttpInfo(
            $collection_id,
            $pipeline
        );
        return $response;
    }

    /**
     * Operation createPipelineWithHttpInfo
     *
     * Create pipeline
     *
     * @param  string $collection_id The collection to create the pipeline in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Pipeline $pipeline The pipeline to create. (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\Pipeline|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPipelineWithHttpInfo($collection_id, $pipeline)
    {
        $request = $this->createPipelineRequest($collection_id, $pipeline);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ("\Sajari\Model\Pipeline" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Pipeline",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\Pipeline";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Pipeline",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPipelineAsync
     *
     * Create pipeline
     *
     * @param  string $collection_id The collection to create the pipeline in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Pipeline $pipeline The pipeline to create. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPipelineAsync($collection_id, $pipeline)
    {
        return $this->createPipelineAsyncWithHttpInfo(
            $collection_id,
            $pipeline
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createPipelineAsyncWithHttpInfo
     *
     * Create pipeline
     *
     * @param  string $collection_id The collection to create the pipeline in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Pipeline $pipeline The pipeline to create. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPipelineAsyncWithHttpInfo($collection_id, $pipeline)
    {
        $returnType = "\Sajari\Model\Pipeline";
        $request = $this->createPipelineRequest($collection_id, $pipeline);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPipeline'
     *
     * @param  string $collection_id The collection to create the pipeline in, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Pipeline $pipeline The pipeline to create. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPipelineRequest($collection_id, $pipeline)
    {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling createPipeline'
            );
        }
        // verify the required parameter 'pipeline' is set
        if (
            $pipeline === null ||
            (is_array($pipeline) && count($pipeline) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pipeline when calling createPipeline'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}/pipelines";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
                "application/yaml",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json", "application/yaml"],
                ["application/json", "application/yaml"]
            );
        }

        // for model (json/xml)
        if (isset($pipeline)) {
            if ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($pipeline)
                );
            } else {
                $httpBody = $pipeline;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "POST",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generatePipelines
     *
     * Generate pipelines
     *
     * @param  string $collection_id The collection, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\GeneratePipelinesRequest $generate_pipelines_request generate_pipelines_request (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\GeneratePipelinesResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function generatePipelines(
        $collection_id,
        $generate_pipelines_request
    ) {
        list($response) = $this->generatePipelinesWithHttpInfo(
            $collection_id,
            $generate_pipelines_request
        );
        return $response;
    }

    /**
     * Operation generatePipelinesWithHttpInfo
     *
     * Generate pipelines
     *
     * @param  string $collection_id The collection, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\GeneratePipelinesRequest $generate_pipelines_request (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\GeneratePipelinesResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function generatePipelinesWithHttpInfo(
        $collection_id,
        $generate_pipelines_request
    ) {
        $request = $this->generatePipelinesRequest(
            $collection_id,
            $generate_pipelines_request
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if (
                        "\Sajari\Model\GeneratePipelinesResponse" ===
                        "\SplFileObject"
                    ) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\GeneratePipelinesResponse",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\GeneratePipelinesResponse";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\GeneratePipelinesResponse",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generatePipelinesAsync
     *
     * Generate pipelines
     *
     * @param  string $collection_id The collection, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\GeneratePipelinesRequest $generate_pipelines_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generatePipelinesAsync(
        $collection_id,
        $generate_pipelines_request
    ) {
        return $this->generatePipelinesAsyncWithHttpInfo(
            $collection_id,
            $generate_pipelines_request
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation generatePipelinesAsyncWithHttpInfo
     *
     * Generate pipelines
     *
     * @param  string $collection_id The collection, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\GeneratePipelinesRequest $generate_pipelines_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generatePipelinesAsyncWithHttpInfo(
        $collection_id,
        $generate_pipelines_request
    ) {
        $returnType = "\Sajari\Model\GeneratePipelinesResponse";
        $request = $this->generatePipelinesRequest(
            $collection_id,
            $generate_pipelines_request
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generatePipelines'
     *
     * @param  string $collection_id The collection, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\GeneratePipelinesRequest $generate_pipelines_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generatePipelinesRequest(
        $collection_id,
        $generate_pipelines_request
    ) {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling generatePipelines'
            );
        }
        // verify the required parameter 'generate_pipelines_request' is set
        if (
            $generate_pipelines_request === null ||
            (is_array($generate_pipelines_request) &&
                count($generate_pipelines_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generate_pipelines_request when calling generatePipelines'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}:generatePipelines";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
                "application/yaml",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json", "application/yaml"],
                ["application/json"]
            );
        }

        // for model (json/xml)
        if (isset($generate_pipelines_request)) {
            if ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $generate_pipelines_request
                    )
                );
            } else {
                $httpBody = $generate_pipelines_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "POST",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDefaultPipeline
     *
     * Get default pipeline
     *
     * @param  string $collection_id The collection to get the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to get.   - TYPE_UNSPECIFIED: Pipeline type not specified.  - RECORD: Record pipeline.  - QUERY: Query pipeline. (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\GetDefaultPipelineResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function getDefaultPipeline($collection_id, $type)
    {
        list($response) = $this->getDefaultPipelineWithHttpInfo(
            $collection_id,
            $type
        );
        return $response;
    }

    /**
     * Operation getDefaultPipelineWithHttpInfo
     *
     * Get default pipeline
     *
     * @param  string $collection_id The collection to get the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to get.   - TYPE_UNSPECIFIED: Pipeline type not specified.  - RECORD: Record pipeline.  - QUERY: Query pipeline. (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\GetDefaultPipelineResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDefaultPipelineWithHttpInfo($collection_id, $type)
    {
        $request = $this->getDefaultPipelineRequest($collection_id, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if (
                        "\Sajari\Model\GetDefaultPipelineResponse" ===
                        "\SplFileObject"
                    ) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\GetDefaultPipelineResponse",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\GetDefaultPipelineResponse";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\GetDefaultPipelineResponse",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDefaultPipelineAsync
     *
     * Get default pipeline
     *
     * @param  string $collection_id The collection to get the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to get.   - TYPE_UNSPECIFIED: Pipeline type not specified.  - RECORD: Record pipeline.  - QUERY: Query pipeline. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultPipelineAsync($collection_id, $type)
    {
        return $this->getDefaultPipelineAsyncWithHttpInfo(
            $collection_id,
            $type
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getDefaultPipelineAsyncWithHttpInfo
     *
     * Get default pipeline
     *
     * @param  string $collection_id The collection to get the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to get.   - TYPE_UNSPECIFIED: Pipeline type not specified.  - RECORD: Record pipeline.  - QUERY: Query pipeline. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultPipelineAsyncWithHttpInfo($collection_id, $type)
    {
        $returnType = "\Sajari\Model\GetDefaultPipelineResponse";
        $request = $this->getDefaultPipelineRequest($collection_id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDefaultPipeline'
     *
     * @param  string $collection_id The collection to get the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to get.   - TYPE_UNSPECIFIED: Pipeline type not specified.  - RECORD: Record pipeline.  - QUERY: Query pipeline. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDefaultPipelineRequest($collection_id, $type)
    {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getDefaultPipeline'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getDefaultPipeline'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}:getDefaultPipeline";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        if ($type !== null) {
            if ("form" === "form" && is_array($type)) {
                foreach ($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["type"] = $type;
            }
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "GET",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDefaultVersion
     *
     * Get default pipeline version
     *
     * @param  string $collection_id The collection that owns the pipeline to get the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to get the default version of. (required)
     * @param  string $name The name of the pipeline to get the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\Pipeline|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function getDefaultVersion(
        $collection_id,
        $type,
        $name,
        $view = "VIEW_UNSPECIFIED"
    ) {
        list($response) = $this->getDefaultVersionWithHttpInfo(
            $collection_id,
            $type,
            $name,
            $view
        );
        return $response;
    }

    /**
     * Operation getDefaultVersionWithHttpInfo
     *
     * Get default pipeline version
     *
     * @param  string $collection_id The collection that owns the pipeline to get the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to get the default version of. (required)
     * @param  string $name The name of the pipeline to get the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\Pipeline|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDefaultVersionWithHttpInfo(
        $collection_id,
        $type,
        $name,
        $view = "VIEW_UNSPECIFIED"
    ) {
        $request = $this->getDefaultVersionRequest(
            $collection_id,
            $type,
            $name,
            $view
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ("\Sajari\Model\Pipeline" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Pipeline",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\Pipeline";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Pipeline",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDefaultVersionAsync
     *
     * Get default pipeline version
     *
     * @param  string $collection_id The collection that owns the pipeline to get the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to get the default version of. (required)
     * @param  string $name The name of the pipeline to get the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultVersionAsync(
        $collection_id,
        $type,
        $name,
        $view = "VIEW_UNSPECIFIED"
    ) {
        return $this->getDefaultVersionAsyncWithHttpInfo(
            $collection_id,
            $type,
            $name,
            $view
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getDefaultVersionAsyncWithHttpInfo
     *
     * Get default pipeline version
     *
     * @param  string $collection_id The collection that owns the pipeline to get the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to get the default version of. (required)
     * @param  string $name The name of the pipeline to get the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultVersionAsyncWithHttpInfo(
        $collection_id,
        $type,
        $name,
        $view = "VIEW_UNSPECIFIED"
    ) {
        $returnType = "\Sajari\Model\Pipeline";
        $request = $this->getDefaultVersionRequest(
            $collection_id,
            $type,
            $name,
            $view
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDefaultVersion'
     *
     * @param  string $collection_id The collection that owns the pipeline to get the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to get the default version of. (required)
     * @param  string $name The name of the pipeline to get the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDefaultVersionRequest(
        $collection_id,
        $type,
        $name,
        $view = "VIEW_UNSPECIFIED"
    ) {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getDefaultVersion'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getDefaultVersion'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getDefaultVersion'
            );
        }

        $resourcePath =
            "/v4/collections/{collection_id}/pipelines/{type}/{name}:getDefaultVersion";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        if ($view !== null) {
            if ("form" === "form" && is_array($view)) {
                foreach ($view as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["view"] = $view;
            }
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
                "application/yaml",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json", "application/yaml"],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "GET",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPipeline
     *
     * Get pipeline
     *
     * @param  string $collection_id The collection that owns the pipeline, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to retrieve. (required)
     * @param  string $name The name of the pipeline to retrieve, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  string $version The version of the pipeline to retrieve, e.g. &#x60;42&#x60;. (required)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\Pipeline|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function getPipeline(
        $collection_id,
        $type,
        $name,
        $version,
        $view = "VIEW_UNSPECIFIED"
    ) {
        list($response) = $this->getPipelineWithHttpInfo(
            $collection_id,
            $type,
            $name,
            $version,
            $view
        );
        return $response;
    }

    /**
     * Operation getPipelineWithHttpInfo
     *
     * Get pipeline
     *
     * @param  string $collection_id The collection that owns the pipeline, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to retrieve. (required)
     * @param  string $name The name of the pipeline to retrieve, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  string $version The version of the pipeline to retrieve, e.g. &#x60;42&#x60;. (required)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\Pipeline|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPipelineWithHttpInfo(
        $collection_id,
        $type,
        $name,
        $version,
        $view = "VIEW_UNSPECIFIED"
    ) {
        $request = $this->getPipelineRequest(
            $collection_id,
            $type,
            $name,
            $version,
            $view
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ("\Sajari\Model\Pipeline" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Pipeline",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\Pipeline";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Pipeline",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPipelineAsync
     *
     * Get pipeline
     *
     * @param  string $collection_id The collection that owns the pipeline, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to retrieve. (required)
     * @param  string $name The name of the pipeline to retrieve, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  string $version The version of the pipeline to retrieve, e.g. &#x60;42&#x60;. (required)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPipelineAsync(
        $collection_id,
        $type,
        $name,
        $version,
        $view = "VIEW_UNSPECIFIED"
    ) {
        return $this->getPipelineAsyncWithHttpInfo(
            $collection_id,
            $type,
            $name,
            $version,
            $view
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getPipelineAsyncWithHttpInfo
     *
     * Get pipeline
     *
     * @param  string $collection_id The collection that owns the pipeline, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to retrieve. (required)
     * @param  string $name The name of the pipeline to retrieve, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  string $version The version of the pipeline to retrieve, e.g. &#x60;42&#x60;. (required)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPipelineAsyncWithHttpInfo(
        $collection_id,
        $type,
        $name,
        $version,
        $view = "VIEW_UNSPECIFIED"
    ) {
        $returnType = "\Sajari\Model\Pipeline";
        $request = $this->getPipelineRequest(
            $collection_id,
            $type,
            $name,
            $version,
            $view
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPipeline'
     *
     * @param  string $collection_id The collection that owns the pipeline, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to retrieve. (required)
     * @param  string $name The name of the pipeline to retrieve, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  string $version The version of the pipeline to retrieve, e.g. &#x60;42&#x60;. (required)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPipelineRequest(
        $collection_id,
        $type,
        $name,
        $version,
        $view = "VIEW_UNSPECIFIED"
    ) {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getPipeline'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getPipeline'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getPipeline'
            );
        }
        // verify the required parameter 'version' is set
        if (
            $version === null ||
            (is_array($version) && count($version) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling getPipeline'
            );
        }

        $resourcePath =
            "/v4/collections/{collection_id}/pipelines/{type}/{name}/{version}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        if ($view !== null) {
            if ("form" === "form" && is_array($view)) {
                foreach ($view as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["view"] = $view;
            }
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                "{" . "version" . "}",
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
                "application/yaml",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json", "application/yaml"],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "GET",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPipelines
     *
     * List pipelines
     *
     * @param  string $collection_id The collection that owns this set of pipelines, e.g. &#x60;my-collection&#x60;. (required)
     * @param  int $page_size The maximum number of pipelines to return. The service may return fewer than this value.  If unspecified, at most 50 pipelines are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param  string $page_token A page token, received from a previous [ListPipelines](/api#operation/ListPipelines) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPipelines](/api#operation/ListPipelines) must match the call that provided the page token. (optional)
     * @param  string $view The amount of information to include in each retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\ListPipelinesResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function listPipelines(
        $collection_id,
        $page_size = null,
        $page_token = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        list($response) = $this->listPipelinesWithHttpInfo(
            $collection_id,
            $page_size,
            $page_token,
            $view
        );
        return $response;
    }

    /**
     * Operation listPipelinesWithHttpInfo
     *
     * List pipelines
     *
     * @param  string $collection_id The collection that owns this set of pipelines, e.g. &#x60;my-collection&#x60;. (required)
     * @param  int $page_size The maximum number of pipelines to return. The service may return fewer than this value.  If unspecified, at most 50 pipelines are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param  string $page_token A page token, received from a previous [ListPipelines](/api#operation/ListPipelines) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPipelines](/api#operation/ListPipelines) must match the call that provided the page token. (optional)
     * @param  string $view The amount of information to include in each retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\ListPipelinesResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPipelinesWithHttpInfo(
        $collection_id,
        $page_size = null,
        $page_token = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        $request = $this->listPipelinesRequest(
            $collection_id,
            $page_size,
            $page_token,
            $view
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if (
                        "\Sajari\Model\ListPipelinesResponse" ===
                        "\SplFileObject"
                    ) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\ListPipelinesResponse",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\ListPipelinesResponse";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\ListPipelinesResponse",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPipelinesAsync
     *
     * List pipelines
     *
     * @param  string $collection_id The collection that owns this set of pipelines, e.g. &#x60;my-collection&#x60;. (required)
     * @param  int $page_size The maximum number of pipelines to return. The service may return fewer than this value.  If unspecified, at most 50 pipelines are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param  string $page_token A page token, received from a previous [ListPipelines](/api#operation/ListPipelines) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPipelines](/api#operation/ListPipelines) must match the call that provided the page token. (optional)
     * @param  string $view The amount of information to include in each retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPipelinesAsync(
        $collection_id,
        $page_size = null,
        $page_token = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        return $this->listPipelinesAsyncWithHttpInfo(
            $collection_id,
            $page_size,
            $page_token,
            $view
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation listPipelinesAsyncWithHttpInfo
     *
     * List pipelines
     *
     * @param  string $collection_id The collection that owns this set of pipelines, e.g. &#x60;my-collection&#x60;. (required)
     * @param  int $page_size The maximum number of pipelines to return. The service may return fewer than this value.  If unspecified, at most 50 pipelines are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param  string $page_token A page token, received from a previous [ListPipelines](/api#operation/ListPipelines) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPipelines](/api#operation/ListPipelines) must match the call that provided the page token. (optional)
     * @param  string $view The amount of information to include in each retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPipelinesAsyncWithHttpInfo(
        $collection_id,
        $page_size = null,
        $page_token = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        $returnType = "\Sajari\Model\ListPipelinesResponse";
        $request = $this->listPipelinesRequest(
            $collection_id,
            $page_size,
            $page_token,
            $view
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPipelines'
     *
     * @param  string $collection_id The collection that owns this set of pipelines, e.g. &#x60;my-collection&#x60;. (required)
     * @param  int $page_size The maximum number of pipelines to return. The service may return fewer than this value.  If unspecified, at most 50 pipelines are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param  string $page_token A page token, received from a previous [ListPipelines](/api#operation/ListPipelines) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPipelines](/api#operation/ListPipelines) must match the call that provided the page token. (optional)
     * @param  string $view The amount of information to include in each retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPipelinesRequest(
        $collection_id,
        $page_size = null,
        $page_token = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling listPipelines'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}/pipelines";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        if ($page_size !== null) {
            if ("form" === "form" && is_array($page_size)) {
                foreach ($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["page_size"] = $page_size;
            }
        }
        // query params
        if ($page_token !== null) {
            if ("form" === "form" && is_array($page_token)) {
                foreach ($page_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["page_token"] = $page_token;
            }
        }
        // query params
        if ($view !== null) {
            if ("form" === "form" && is_array($view)) {
                foreach ($view as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["view"] = $view;
            }
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "GET",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setDefaultPipeline
     *
     * Set default pipeline
     *
     * @param  string $collection_id The collection to set the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\SetDefaultPipelineRequest $set_default_pipeline_request set_default_pipeline_request (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function setDefaultPipeline(
        $collection_id,
        $set_default_pipeline_request
    ) {
        list($response) = $this->setDefaultPipelineWithHttpInfo(
            $collection_id,
            $set_default_pipeline_request
        );
        return $response;
    }

    /**
     * Operation setDefaultPipelineWithHttpInfo
     *
     * Set default pipeline
     *
     * @param  string $collection_id The collection to set the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\SetDefaultPipelineRequest $set_default_pipeline_request (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function setDefaultPipelineWithHttpInfo(
        $collection_id,
        $set_default_pipeline_request
    ) {
        $request = $this->setDefaultPipelineRequest(
            $collection_id,
            $set_default_pipeline_request
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ("object" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, "object", []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "object";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "object",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setDefaultPipelineAsync
     *
     * Set default pipeline
     *
     * @param  string $collection_id The collection to set the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\SetDefaultPipelineRequest $set_default_pipeline_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDefaultPipelineAsync(
        $collection_id,
        $set_default_pipeline_request
    ) {
        return $this->setDefaultPipelineAsyncWithHttpInfo(
            $collection_id,
            $set_default_pipeline_request
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation setDefaultPipelineAsyncWithHttpInfo
     *
     * Set default pipeline
     *
     * @param  string $collection_id The collection to set the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\SetDefaultPipelineRequest $set_default_pipeline_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDefaultPipelineAsyncWithHttpInfo(
        $collection_id,
        $set_default_pipeline_request
    ) {
        $returnType = "object";
        $request = $this->setDefaultPipelineRequest(
            $collection_id,
            $set_default_pipeline_request
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setDefaultPipeline'
     *
     * @param  string $collection_id The collection to set the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\SetDefaultPipelineRequest $set_default_pipeline_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setDefaultPipelineRequest(
        $collection_id,
        $set_default_pipeline_request
    ) {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling setDefaultPipeline'
            );
        }
        // verify the required parameter 'set_default_pipeline_request' is set
        if (
            $set_default_pipeline_request === null ||
            (is_array($set_default_pipeline_request) &&
                count($set_default_pipeline_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_default_pipeline_request when calling setDefaultPipeline'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}:setDefaultPipeline";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                ["application/json"]
            );
        }

        // for model (json/xml)
        if (isset($set_default_pipeline_request)) {
            if ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $set_default_pipeline_request
                    )
                );
            } else {
                $httpBody = $set_default_pipeline_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "POST",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setDefaultVersion
     *
     * Set default pipeline version
     *
     * @param  string $collection_id The collection that owns the pipeline to set the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to set the default version of. (required)
     * @param  string $name The name of the pipeline to set the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  \Sajari\Model\SetDefaultVersionRequest $set_default_version_request set_default_version_request (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function setDefaultVersion(
        $collection_id,
        $type,
        $name,
        $set_default_version_request
    ) {
        list($response) = $this->setDefaultVersionWithHttpInfo(
            $collection_id,
            $type,
            $name,
            $set_default_version_request
        );
        return $response;
    }

    /**
     * Operation setDefaultVersionWithHttpInfo
     *
     * Set default pipeline version
     *
     * @param  string $collection_id The collection that owns the pipeline to set the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to set the default version of. (required)
     * @param  string $name The name of the pipeline to set the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  \Sajari\Model\SetDefaultVersionRequest $set_default_version_request (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function setDefaultVersionWithHttpInfo(
        $collection_id,
        $type,
        $name,
        $set_default_version_request
    ) {
        $request = $this->setDefaultVersionRequest(
            $collection_id,
            $type,
            $name,
            $set_default_version_request
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ("object" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, "object", []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "object";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "object",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setDefaultVersionAsync
     *
     * Set default pipeline version
     *
     * @param  string $collection_id The collection that owns the pipeline to set the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to set the default version of. (required)
     * @param  string $name The name of the pipeline to set the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  \Sajari\Model\SetDefaultVersionRequest $set_default_version_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDefaultVersionAsync(
        $collection_id,
        $type,
        $name,
        $set_default_version_request
    ) {
        return $this->setDefaultVersionAsyncWithHttpInfo(
            $collection_id,
            $type,
            $name,
            $set_default_version_request
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation setDefaultVersionAsyncWithHttpInfo
     *
     * Set default pipeline version
     *
     * @param  string $collection_id The collection that owns the pipeline to set the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to set the default version of. (required)
     * @param  string $name The name of the pipeline to set the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  \Sajari\Model\SetDefaultVersionRequest $set_default_version_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDefaultVersionAsyncWithHttpInfo(
        $collection_id,
        $type,
        $name,
        $set_default_version_request
    ) {
        $returnType = "object";
        $request = $this->setDefaultVersionRequest(
            $collection_id,
            $type,
            $name,
            $set_default_version_request
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setDefaultVersion'
     *
     * @param  string $collection_id The collection that owns the pipeline to set the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $type The type of the pipeline to set the default version of. (required)
     * @param  string $name The name of the pipeline to set the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param  \Sajari\Model\SetDefaultVersionRequest $set_default_version_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setDefaultVersionRequest(
        $collection_id,
        $type,
        $name,
        $set_default_version_request
    ) {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling setDefaultVersion'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling setDefaultVersion'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling setDefaultVersion'
            );
        }
        // verify the required parameter 'set_default_version_request' is set
        if (
            $set_default_version_request === null ||
            (is_array($set_default_version_request) &&
                count($set_default_version_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_default_version_request when calling setDefaultVersion'
            );
        }

        $resourcePath =
            "/v4/collections/{collection_id}/pipelines/{type}/{name}:setDefaultVersion";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                ["application/json"]
            );
        }

        // for model (json/xml)
        if (isset($set_default_version_request)) {
            if ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $set_default_version_request
                    )
                );
            } else {
                $httpBody = $set_default_version_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "POST",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen(
                $this->config->getDebugFile(),
                "a"
            );
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException(
                    "Failed to open the debug file: " .
                        $this->config->getDebugFile()
                );
            }
        }

        return $options;
    }
}
