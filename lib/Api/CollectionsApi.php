<?php
/**
 * CollectionsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Search.io API
 *
 * The version of the OpenAPI document: 4.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sajari\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Sajari\ApiException;
use Sajari\Configuration;
use Sajari\HeaderSelector;
use Sajari\ObjectSerializer;

/**
 * CollectionsApi Class Doc Comment
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CollectionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * The value to use for the Sajari-Client-User-Agent header
     *
     * @var string
     */
    protected $clientUserAgent;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;

        $composer = json_decode(
            file_get_contents(dirname(__FILE__) . "/../../composer.json"),
            true
        );

        $clientUserAgent = "sajari-sdk-php";
        if ($composer["version"]) {
            $clientUserAgent = $clientUserAgent . "/" . $composer["version"];
        }
        $this->clientUserAgent = $clientUserAgent;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCollection
     *
     * Create collection
     *
     * @param  string $collection_id The ID to use for the collection.  This must start with an alphanumeric character followed by one or more alphanumeric or &#x60;-&#x60; characters. Strictly speaking, it must match the regular expression: &#x60;^[A-Za-z][A-Za-z0-9\\-]*$&#x60;. (required)
     * @param  \Sajari\Model\Collection $collection Details of the collection to create. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\Collection|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function createCollection(
        $collection_id,
        $collection,
        $account_id = null
    ) {
        list($response) = $this->createCollectionWithHttpInfo(
            $collection_id,
            $collection,
            $account_id
        );
        return $response;
    }

    /**
     * Operation createCollectionWithHttpInfo
     *
     * Create collection
     *
     * @param  string $collection_id The ID to use for the collection.  This must start with an alphanumeric character followed by one or more alphanumeric or &#x60;-&#x60; characters. Strictly speaking, it must match the regular expression: &#x60;^[A-Za-z][A-Za-z0-9\\-]*$&#x60;. (required)
     * @param  \Sajari\Model\Collection $collection Details of the collection to create. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\Collection|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCollectionWithHttpInfo(
        $collection_id,
        $collection,
        $account_id = null
    ) {
        $request = $this->createCollectionRequest(
            $collection_id,
            $collection,
            $account_id
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ("\Sajari\Model\Collection" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Collection",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 409:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\Collection";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Collection",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCollectionAsync
     *
     * Create collection
     *
     * @param  string $collection_id The ID to use for the collection.  This must start with an alphanumeric character followed by one or more alphanumeric or &#x60;-&#x60; characters. Strictly speaking, it must match the regular expression: &#x60;^[A-Za-z][A-Za-z0-9\\-]*$&#x60;. (required)
     * @param  \Sajari\Model\Collection $collection Details of the collection to create. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCollectionAsync(
        $collection_id,
        $collection,
        $account_id = null
    ) {
        return $this->createCollectionAsyncWithHttpInfo(
            $collection_id,
            $collection,
            $account_id
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createCollectionAsyncWithHttpInfo
     *
     * Create collection
     *
     * @param  string $collection_id The ID to use for the collection.  This must start with an alphanumeric character followed by one or more alphanumeric or &#x60;-&#x60; characters. Strictly speaking, it must match the regular expression: &#x60;^[A-Za-z][A-Za-z0-9\\-]*$&#x60;. (required)
     * @param  \Sajari\Model\Collection $collection Details of the collection to create. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCollectionAsyncWithHttpInfo(
        $collection_id,
        $collection,
        $account_id = null
    ) {
        $returnType = "\Sajari\Model\Collection";
        $request = $this->createCollectionRequest(
            $collection_id,
            $collection,
            $account_id
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCollection'
     *
     * @param  string $collection_id The ID to use for the collection.  This must start with an alphanumeric character followed by one or more alphanumeric or &#x60;-&#x60; characters. Strictly speaking, it must match the regular expression: &#x60;^[A-Za-z][A-Za-z0-9\\-]*$&#x60;. (required)
     * @param  \Sajari\Model\Collection $collection Details of the collection to create. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCollectionRequest(
        $collection_id,
        $collection,
        $account_id = null
    ) {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling createCollection'
            );
        }
        // verify the required parameter 'collection' is set
        if (
            $collection === null ||
            (is_array($collection) && count($collection) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection when calling createCollection'
            );
        }

        $resourcePath = "/v4/collections";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        if ($collection_id !== null) {
            if ("form" === "form" && is_array($collection_id)) {
                foreach ($collection_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["collection_id"] = $collection_id;
            }
        }

        // header params
        if ($account_id !== null) {
            $headerParams["Account-Id"] = ObjectSerializer::toHeaderValue(
                $account_id
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                ["application/json"]
            );
        }

        // for model (json/xml)
        if (isset($collection)) {
            if ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($collection)
                );
            } else {
                $httpBody = $collection;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "POST",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCollection
     *
     * Delete collection
     *
     * @param  string $collection_id The collection to delete, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function deleteCollection($collection_id, $account_id = null)
    {
        list($response) = $this->deleteCollectionWithHttpInfo(
            $collection_id,
            $account_id
        );
        return $response;
    }

    /**
     * Operation deleteCollectionWithHttpInfo
     *
     * Delete collection
     *
     * @param  string $collection_id The collection to delete, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCollectionWithHttpInfo(
        $collection_id,
        $account_id = null
    ) {
        $request = $this->deleteCollectionRequest($collection_id, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ("mixed" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, "mixed", []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "mixed";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "mixed",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCollectionAsync
     *
     * Delete collection
     *
     * @param  string $collection_id The collection to delete, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCollectionAsync($collection_id, $account_id = null)
    {
        return $this->deleteCollectionAsyncWithHttpInfo(
            $collection_id,
            $account_id
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteCollectionAsyncWithHttpInfo
     *
     * Delete collection
     *
     * @param  string $collection_id The collection to delete, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCollectionAsyncWithHttpInfo(
        $collection_id,
        $account_id = null
    ) {
        $returnType = "mixed";
        $request = $this->deleteCollectionRequest($collection_id, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCollection'
     *
     * @param  string $collection_id The collection to delete, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCollectionRequest($collection_id, $account_id = null)
    {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling deleteCollection'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // header params
        if ($account_id !== null) {
            $headerParams["Account-Id"] = ObjectSerializer::toHeaderValue(
                $account_id
            );
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "DELETE",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation experiment
     *
     * Experiment
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\ExperimentRequest $experiment_request experiment_request (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\ExperimentResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function experiment($collection_id, $experiment_request)
    {
        list($response) = $this->experimentWithHttpInfo(
            $collection_id,
            $experiment_request
        );
        return $response;
    }

    /**
     * Operation experimentWithHttpInfo
     *
     * Experiment
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\ExperimentRequest $experiment_request (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\ExperimentResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function experimentWithHttpInfo($collection_id, $experiment_request)
    {
        $request = $this->experimentRequest(
            $collection_id,
            $experiment_request
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if (
                        "\Sajari\Model\ExperimentResponse" === "\SplFileObject"
                    ) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\ExperimentResponse",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\ExperimentResponse";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\ExperimentResponse",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation experimentAsync
     *
     * Experiment
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\ExperimentRequest $experiment_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function experimentAsync($collection_id, $experiment_request)
    {
        return $this->experimentAsyncWithHttpInfo(
            $collection_id,
            $experiment_request
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation experimentAsyncWithHttpInfo
     *
     * Experiment
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\ExperimentRequest $experiment_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function experimentAsyncWithHttpInfo(
        $collection_id,
        $experiment_request
    ) {
        $returnType = "\Sajari\Model\ExperimentResponse";
        $request = $this->experimentRequest(
            $collection_id,
            $experiment_request
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'experiment'
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\ExperimentRequest $experiment_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function experimentRequest($collection_id, $experiment_request)
    {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling experiment'
            );
        }
        // verify the required parameter 'experiment_request' is set
        if (
            $experiment_request === null ||
            (is_array($experiment_request) && count($experiment_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $experiment_request when calling experiment'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}:experiment";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                ["application/json"]
            );
        }

        // for model (json/xml)
        if (isset($experiment_request)) {
            if ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $experiment_request
                    )
                );
            } else {
                $httpBody = $experiment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "POST",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollection
     *
     * Get collection
     *
     * @param  string $collection_id The collection to retrieve, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - BASIC: Include basic information including display name and domains. This is the default value (for both [ListCollections](/docs/api#operation/ListCollections) and [GetCollection](/docs/api#operation/GetCollection)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full collection details like disk usage. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\Collection|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function getCollection(
        $collection_id,
        $account_id = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        list($response) = $this->getCollectionWithHttpInfo(
            $collection_id,
            $account_id,
            $view
        );
        return $response;
    }

    /**
     * Operation getCollectionWithHttpInfo
     *
     * Get collection
     *
     * @param  string $collection_id The collection to retrieve, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - BASIC: Include basic information including display name and domains. This is the default value (for both [ListCollections](/docs/api#operation/ListCollections) and [GetCollection](/docs/api#operation/GetCollection)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full collection details like disk usage. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\Collection|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionWithHttpInfo(
        $collection_id,
        $account_id = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        $request = $this->getCollectionRequest(
            $collection_id,
            $account_id,
            $view
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ("\Sajari\Model\Collection" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Collection",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\Collection";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Collection",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCollectionAsync
     *
     * Get collection
     *
     * @param  string $collection_id The collection to retrieve, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - BASIC: Include basic information including display name and domains. This is the default value (for both [ListCollections](/docs/api#operation/ListCollections) and [GetCollection](/docs/api#operation/GetCollection)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full collection details like disk usage. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionAsync(
        $collection_id,
        $account_id = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        return $this->getCollectionAsyncWithHttpInfo(
            $collection_id,
            $account_id,
            $view
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCollectionAsyncWithHttpInfo
     *
     * Get collection
     *
     * @param  string $collection_id The collection to retrieve, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - BASIC: Include basic information including display name and domains. This is the default value (for both [ListCollections](/docs/api#operation/ListCollections) and [GetCollection](/docs/api#operation/GetCollection)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full collection details like disk usage. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionAsyncWithHttpInfo(
        $collection_id,
        $account_id = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        $returnType = "\Sajari\Model\Collection";
        $request = $this->getCollectionRequest(
            $collection_id,
            $account_id,
            $view
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollection'
     *
     * @param  string $collection_id The collection to retrieve, e.g. &#x60;my-collection&#x60;. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  string $view The amount of information to include in the retrieved pipeline.   - BASIC: Include basic information including display name and domains. This is the default value (for both [ListCollections](/docs/api#operation/ListCollections) and [GetCollection](/docs/api#operation/GetCollection)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full collection details like disk usage. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionRequest(
        $collection_id,
        $account_id = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getCollection'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        if ($view !== null) {
            if ("form" === "form" && is_array($view)) {
                foreach ($view as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["view"] = $view;
            }
        }

        // header params
        if ($account_id !== null) {
            $headerParams["Account-Id"] = ObjectSerializer::toHeaderValue(
                $account_id
            );
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "GET",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCollections
     *
     * List collections
     *
     * @param  string $account_id The account that owns this set of collections, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  int $page_size The maximum number of collections to return. The service may return fewer than this value.  If unspecified, at most 50 collections are returned.  The maximum value is 100; values above 100 are coerced to 100. (optional)
     * @param  string $page_token A page token, received from a previous [ListCollections](/docs/api#operation/ListCollections) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListCollections](/docs/api#operation/ListCollections) must match the call that provided the page token. (optional)
     * @param  string $view The amount of information to include in each retrieved collection.   - BASIC: Include basic information including display name and domains. This is the default value (for both [ListCollections](/docs/api#operation/ListCollections) and [GetCollection](/docs/api#operation/GetCollection)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full collection details like disk usage. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\ListCollectionsResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function listCollections(
        $account_id = null,
        $page_size = null,
        $page_token = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        list($response) = $this->listCollectionsWithHttpInfo(
            $account_id,
            $page_size,
            $page_token,
            $view
        );
        return $response;
    }

    /**
     * Operation listCollectionsWithHttpInfo
     *
     * List collections
     *
     * @param  string $account_id The account that owns this set of collections, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  int $page_size The maximum number of collections to return. The service may return fewer than this value.  If unspecified, at most 50 collections are returned.  The maximum value is 100; values above 100 are coerced to 100. (optional)
     * @param  string $page_token A page token, received from a previous [ListCollections](/docs/api#operation/ListCollections) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListCollections](/docs/api#operation/ListCollections) must match the call that provided the page token. (optional)
     * @param  string $view The amount of information to include in each retrieved collection.   - BASIC: Include basic information including display name and domains. This is the default value (for both [ListCollections](/docs/api#operation/ListCollections) and [GetCollection](/docs/api#operation/GetCollection)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full collection details like disk usage. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\ListCollectionsResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCollectionsWithHttpInfo(
        $account_id = null,
        $page_size = null,
        $page_token = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        $request = $this->listCollectionsRequest(
            $account_id,
            $page_size,
            $page_token,
            $view
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if (
                        "\Sajari\Model\ListCollectionsResponse" ===
                        "\SplFileObject"
                    ) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\ListCollectionsResponse",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\ListCollectionsResponse";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\ListCollectionsResponse",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCollectionsAsync
     *
     * List collections
     *
     * @param  string $account_id The account that owns this set of collections, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  int $page_size The maximum number of collections to return. The service may return fewer than this value.  If unspecified, at most 50 collections are returned.  The maximum value is 100; values above 100 are coerced to 100. (optional)
     * @param  string $page_token A page token, received from a previous [ListCollections](/docs/api#operation/ListCollections) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListCollections](/docs/api#operation/ListCollections) must match the call that provided the page token. (optional)
     * @param  string $view The amount of information to include in each retrieved collection.   - BASIC: Include basic information including display name and domains. This is the default value (for both [ListCollections](/docs/api#operation/ListCollections) and [GetCollection](/docs/api#operation/GetCollection)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full collection details like disk usage. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCollectionsAsync(
        $account_id = null,
        $page_size = null,
        $page_token = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        return $this->listCollectionsAsyncWithHttpInfo(
            $account_id,
            $page_size,
            $page_token,
            $view
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation listCollectionsAsyncWithHttpInfo
     *
     * List collections
     *
     * @param  string $account_id The account that owns this set of collections, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  int $page_size The maximum number of collections to return. The service may return fewer than this value.  If unspecified, at most 50 collections are returned.  The maximum value is 100; values above 100 are coerced to 100. (optional)
     * @param  string $page_token A page token, received from a previous [ListCollections](/docs/api#operation/ListCollections) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListCollections](/docs/api#operation/ListCollections) must match the call that provided the page token. (optional)
     * @param  string $view The amount of information to include in each retrieved collection.   - BASIC: Include basic information including display name and domains. This is the default value (for both [ListCollections](/docs/api#operation/ListCollections) and [GetCollection](/docs/api#operation/GetCollection)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full collection details like disk usage. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCollectionsAsyncWithHttpInfo(
        $account_id = null,
        $page_size = null,
        $page_token = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        $returnType = "\Sajari\Model\ListCollectionsResponse";
        $request = $this->listCollectionsRequest(
            $account_id,
            $page_size,
            $page_token,
            $view
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCollections'
     *
     * @param  string $account_id The account that owns this set of collections, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  int $page_size The maximum number of collections to return. The service may return fewer than this value.  If unspecified, at most 50 collections are returned.  The maximum value is 100; values above 100 are coerced to 100. (optional)
     * @param  string $page_token A page token, received from a previous [ListCollections](/docs/api#operation/ListCollections) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListCollections](/docs/api#operation/ListCollections) must match the call that provided the page token. (optional)
     * @param  string $view The amount of information to include in each retrieved collection.   - BASIC: Include basic information including display name and domains. This is the default value (for both [ListCollections](/docs/api#operation/ListCollections) and [GetCollection](/docs/api#operation/GetCollection)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full collection details like disk usage. (optional, default to 'VIEW_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listCollectionsRequest(
        $account_id = null,
        $page_size = null,
        $page_token = null,
        $view = "VIEW_UNSPECIFIED"
    ) {
        $resourcePath = "/v4/collections";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        if ($page_size !== null) {
            if ("form" === "form" && is_array($page_size)) {
                foreach ($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["page_size"] = $page_size;
            }
        }
        // query params
        if ($page_token !== null) {
            if ("form" === "form" && is_array($page_token)) {
                foreach ($page_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["page_token"] = $page_token;
            }
        }
        // query params
        if ($view !== null) {
            if ("form" === "form" && is_array($view)) {
                foreach ($view as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["view"] = $view;
            }
        }

        // header params
        if ($account_id !== null) {
            $headerParams["Account-Id"] = ObjectSerializer::toHeaderValue(
                $account_id
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "GET",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryCollection
     *
     * Query collection
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\QueryCollectionRequest $query_collection_request query_collection_request (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;.  Unlike other API calls, the &#x60;QueryCollection&#x60; call can be called from a browser. When called from a browser, the &#x60;Account-Id&#x60; header must be set to your account ID. (optional)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\QueryCollectionResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function queryCollection(
        $collection_id,
        $query_collection_request,
        $account_id = null
    ) {
        list($response) = $this->queryCollectionWithHttpInfo(
            $collection_id,
            $query_collection_request,
            $account_id
        );
        return $response;
    }

    /**
     * Operation queryCollectionWithHttpInfo
     *
     * Query collection
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\QueryCollectionRequest $query_collection_request (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;.  Unlike other API calls, the &#x60;QueryCollection&#x60; call can be called from a browser. When called from a browser, the &#x60;Account-Id&#x60; header must be set to your account ID. (optional)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\QueryCollectionResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryCollectionWithHttpInfo(
        $collection_id,
        $query_collection_request,
        $account_id = null
    ) {
        $request = $this->queryCollectionRequest(
            $collection_id,
            $query_collection_request,
            $account_id
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if (
                        "\Sajari\Model\QueryCollectionResponse" ===
                        "\SplFileObject"
                    ) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\QueryCollectionResponse",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\QueryCollectionResponse";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\QueryCollectionResponse",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryCollectionAsync
     *
     * Query collection
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\QueryCollectionRequest $query_collection_request (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;.  Unlike other API calls, the &#x60;QueryCollection&#x60; call can be called from a browser. When called from a browser, the &#x60;Account-Id&#x60; header must be set to your account ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryCollectionAsync(
        $collection_id,
        $query_collection_request,
        $account_id = null
    ) {
        return $this->queryCollectionAsyncWithHttpInfo(
            $collection_id,
            $query_collection_request,
            $account_id
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation queryCollectionAsyncWithHttpInfo
     *
     * Query collection
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\QueryCollectionRequest $query_collection_request (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;.  Unlike other API calls, the &#x60;QueryCollection&#x60; call can be called from a browser. When called from a browser, the &#x60;Account-Id&#x60; header must be set to your account ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryCollectionAsyncWithHttpInfo(
        $collection_id,
        $query_collection_request,
        $account_id = null
    ) {
        $returnType = "\Sajari\Model\QueryCollectionResponse";
        $request = $this->queryCollectionRequest(
            $collection_id,
            $query_collection_request,
            $account_id
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryCollection'
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\QueryCollectionRequest $query_collection_request (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;.  Unlike other API calls, the &#x60;QueryCollection&#x60; call can be called from a browser. When called from a browser, the &#x60;Account-Id&#x60; header must be set to your account ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryCollectionRequest(
        $collection_id,
        $query_collection_request,
        $account_id = null
    ) {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling queryCollection'
            );
        }
        // verify the required parameter 'query_collection_request' is set
        if (
            $query_collection_request === null ||
            (is_array($query_collection_request) &&
                count($query_collection_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query_collection_request when calling queryCollection'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}:query";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // header params
        if ($account_id !== null) {
            $headerParams["Account-Id"] = ObjectSerializer::toHeaderValue(
                $account_id
            );
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                ["application/json"]
            );
        }

        // for model (json/xml)
        if (isset($query_collection_request)) {
            if ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $query_collection_request
                    )
                );
            } else {
                $httpBody = $query_collection_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "POST",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryCollection2
     *
     * Query collection
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\QueryCollectionRequest $query_collection_request query_collection_request (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\QueryCollectionResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function queryCollection2($collection_id, $query_collection_request)
    {
        list($response) = $this->queryCollection2WithHttpInfo(
            $collection_id,
            $query_collection_request
        );
        return $response;
    }

    /**
     * Operation queryCollection2WithHttpInfo
     *
     * Query collection
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\QueryCollectionRequest $query_collection_request (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\QueryCollectionResponse|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryCollection2WithHttpInfo(
        $collection_id,
        $query_collection_request
    ) {
        $request = $this->queryCollection2Request(
            $collection_id,
            $query_collection_request
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if (
                        "\Sajari\Model\QueryCollectionResponse" ===
                        "\SplFileObject"
                    ) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\QueryCollectionResponse",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\QueryCollectionResponse";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\QueryCollectionResponse",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryCollection2Async
     *
     * Query collection
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\QueryCollectionRequest $query_collection_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryCollection2Async(
        $collection_id,
        $query_collection_request
    ) {
        return $this->queryCollection2AsyncWithHttpInfo(
            $collection_id,
            $query_collection_request
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation queryCollection2AsyncWithHttpInfo
     *
     * Query collection
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\QueryCollectionRequest $query_collection_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryCollection2AsyncWithHttpInfo(
        $collection_id,
        $query_collection_request
    ) {
        $returnType = "\Sajari\Model\QueryCollectionResponse";
        $request = $this->queryCollection2Request(
            $collection_id,
            $query_collection_request
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryCollection2'
     *
     * @param  string $collection_id The collection to query, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\QueryCollectionRequest $query_collection_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryCollection2Request(
        $collection_id,
        $query_collection_request
    ) {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling queryCollection2'
            );
        }
        // verify the required parameter 'query_collection_request' is set
        if (
            $query_collection_request === null ||
            (is_array($query_collection_request) &&
                count($query_collection_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query_collection_request when calling queryCollection2'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}:queryCollection";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                ["application/json"]
            );
        }

        // for model (json/xml)
        if (isset($query_collection_request)) {
            if ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $query_collection_request
                    )
                );
            } else {
                $httpBody = $query_collection_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "POST",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation trackEvent
     *
     * Track event
     *
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (required)
     * @param  string $collection_id The collection to track the event against, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Event $event The details of the event to track. (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function trackEvent($account_id, $collection_id, $event)
    {
        list($response) = $this->trackEventWithHttpInfo(
            $account_id,
            $collection_id,
            $event
        );
        return $response;
    }

    /**
     * Operation trackEventWithHttpInfo
     *
     * Track event
     *
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (required)
     * @param  string $collection_id The collection to track the event against, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Event $event The details of the event to track. (required)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function trackEventWithHttpInfo($account_id, $collection_id, $event)
    {
        $request = $this->trackEventRequest(
            $account_id,
            $collection_id,
            $event
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ("object" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, "object", []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "object";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "object",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trackEventAsync
     *
     * Track event
     *
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (required)
     * @param  string $collection_id The collection to track the event against, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Event $event The details of the event to track. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trackEventAsync($account_id, $collection_id, $event)
    {
        return $this->trackEventAsyncWithHttpInfo(
            $account_id,
            $collection_id,
            $event
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation trackEventAsyncWithHttpInfo
     *
     * Track event
     *
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (required)
     * @param  string $collection_id The collection to track the event against, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Event $event The details of the event to track. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trackEventAsyncWithHttpInfo(
        $account_id,
        $collection_id,
        $event
    ) {
        $returnType = "object";
        $request = $this->trackEventRequest(
            $account_id,
            $collection_id,
            $event
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trackEvent'
     *
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (required)
     * @param  string $collection_id The collection to track the event against, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Event $event The details of the event to track. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function trackEventRequest($account_id, $collection_id, $event)
    {
        // verify the required parameter 'account_id' is set
        if (
            $account_id === null ||
            (is_array($account_id) && count($account_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling trackEvent'
            );
        }
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling trackEvent'
            );
        }
        // verify the required parameter 'event' is set
        if ($event === null || (is_array($event) && count($event) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event when calling trackEvent'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}:trackEvent";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // header params
        if ($account_id !== null) {
            $headerParams["Account-Id"] = ObjectSerializer::toHeaderValue(
                $account_id
            );
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                ["application/json"]
            );
        }

        // for model (json/xml)
        if (isset($event)) {
            if ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($event)
                );
            } else {
                $httpBody = $event;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "POST",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCollection
     *
     * Update collection
     *
     * @param  string $collection_id The collection to update, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Collection $collection The details of the collection to update. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  string $update_mask The list of fields to update, separated by a comma, e.g. &#x60;authorized_query_domains,display_name&#x60;.  Each field should be in snake case.  For each field that you want to update, provide a corresponding value in the collection object containing the new value. (optional)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sajari\Model\Collection|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error
     */
    public function updateCollection(
        $collection_id,
        $collection,
        $account_id = null,
        $update_mask = null
    ) {
        list($response) = $this->updateCollectionWithHttpInfo(
            $collection_id,
            $collection,
            $account_id,
            $update_mask
        );
        return $response;
    }

    /**
     * Operation updateCollectionWithHttpInfo
     *
     * Update collection
     *
     * @param  string $collection_id The collection to update, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Collection $collection The details of the collection to update. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  string $update_mask The list of fields to update, separated by a comma, e.g. &#x60;authorized_query_domains,display_name&#x60;.  Each field should be in snake case.  For each field that you want to update, provide a corresponding value in the collection object containing the new value. (optional)
     *
     * @throws \Sajari\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sajari\Model\Collection|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error|\Sajari\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCollectionWithHttpInfo(
        $collection_id,
        $collection,
        $account_id = null,
        $update_mask = null
    ) {
        $request = $this->updateCollectionRequest(
            $collection_id,
            $collection,
            $account_id,
            $update_mask
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ("\Sajari\Model\Collection" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Collection",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                default:
                    if ("\Sajari\Model\Error" === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\Sajari\Model\Error",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\Sajari\Model\Collection";
            $responseBody = $response->getBody();
            if ($returnType === "\SplFileObject") {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Collection",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\Sajari\Model\Error",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCollectionAsync
     *
     * Update collection
     *
     * @param  string $collection_id The collection to update, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Collection $collection The details of the collection to update. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  string $update_mask The list of fields to update, separated by a comma, e.g. &#x60;authorized_query_domains,display_name&#x60;.  Each field should be in snake case.  For each field that you want to update, provide a corresponding value in the collection object containing the new value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCollectionAsync(
        $collection_id,
        $collection,
        $account_id = null,
        $update_mask = null
    ) {
        return $this->updateCollectionAsyncWithHttpInfo(
            $collection_id,
            $collection,
            $account_id,
            $update_mask
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateCollectionAsyncWithHttpInfo
     *
     * Update collection
     *
     * @param  string $collection_id The collection to update, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Collection $collection The details of the collection to update. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  string $update_mask The list of fields to update, separated by a comma, e.g. &#x60;authorized_query_domains,display_name&#x60;.  Each field should be in snake case.  For each field that you want to update, provide a corresponding value in the collection object containing the new value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCollectionAsyncWithHttpInfo(
        $collection_id,
        $collection,
        $account_id = null,
        $update_mask = null
    ) {
        $returnType = "\Sajari\Model\Collection";
        $request = $this->updateCollectionRequest(
            $collection_id,
            $collection,
            $account_id,
            $update_mask
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === "\SplFileObject") {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCollection'
     *
     * @param  string $collection_id The collection to update, e.g. &#x60;my-collection&#x60;. (required)
     * @param  \Sajari\Model\Collection $collection The details of the collection to update. (required)
     * @param  string $account_id The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param  string $update_mask The list of fields to update, separated by a comma, e.g. &#x60;authorized_query_domains,display_name&#x60;.  Each field should be in snake case.  For each field that you want to update, provide a corresponding value in the collection object containing the new value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCollectionRequest(
        $collection_id,
        $collection,
        $account_id = null,
        $update_mask = null
    ) {
        // verify the required parameter 'collection_id' is set
        if (
            $collection_id === null ||
            (is_array($collection_id) && count($collection_id) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling updateCollection'
            );
        }
        // verify the required parameter 'collection' is set
        if (
            $collection === null ||
            (is_array($collection) && count($collection) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection when calling updateCollection'
            );
        }

        $resourcePath = "/v4/collections/{collection_id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        if ($update_mask !== null) {
            if ("form" === "form" && is_array($update_mask)) {
                foreach ($update_mask as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams["update_mask"] = $update_mask;
            }
        }

        // header params
        if ($account_id !== null) {
            $headerParams["Account-Id"] = ObjectSerializer::toHeaderValue(
                $account_id
            );
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                "{" . "collection_id" . "}",
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                "application/json",
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ["application/json"],
                ["application/json"]
            );
        }

        // for model (json/xml)
        if (isset($collection)) {
            if ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($collection)
                );
            } else {
                $httpBody = $collection;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers["Content-Type"] === "application/json") {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers["Authorization"] =
                "Basic " .
                base64_encode(
                    $this->config->getUsername() .
                        ":" .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->clientUserAgent) {
            $defaultHeaders["Sajari-Client-User-Agent"] =
                $this->clientUserAgent;
        }
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            "PATCH",
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen(
                $this->config->getDebugFile(),
                "a"
            );
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException(
                    "Failed to open the debug file: " .
                        $this->config->getDebugFile()
                );
            }
        }

        return $options;
    }
}
