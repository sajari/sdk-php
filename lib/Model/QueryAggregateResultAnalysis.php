<?php
/**
 * QueryAggregateResultAnalysis
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sajari\Model;

use \ArrayAccess;
use Sajari\ObjectSerializer;

/**
 * QueryAggregateResultAnalysis Class Doc Comment
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class QueryAggregateResultAnalysis implements
    ModelInterface,
    ArrayAccess,
    \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "QueryAggregateResultAnalysis";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "avg_length" => "float",
        "cardinality" => "int",
        "coverage" => "int",
        "max_length" => "int",
        "min_length" => "int",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "avg_length" => "float",
        "cardinality" => "int32",
        "coverage" => "int32",
        "max_length" => "int32",
        "min_length" => "int32",
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "avg_length" => "avg_length",
        "cardinality" => "cardinality",
        "coverage" => "coverage",
        "max_length" => "max_length",
        "min_length" => "min_length",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "avg_length" => "setAvgLength",
        "cardinality" => "setCardinality",
        "coverage" => "setCoverage",
        "max_length" => "setMaxLength",
        "min_length" => "setMinLength",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "avg_length" => "getAvgLength",
        "cardinality" => "getCardinality",
        "coverage" => "getCoverage",
        "max_length" => "getMaxLength",
        "min_length" => "getMinLength",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container["avg_length"] = $data["avg_length"] ?? null;
        $this->container["cardinality"] = $data["cardinality"] ?? null;
        $this->container["coverage"] = $data["coverage"] ?? null;
        $this->container["max_length"] = $data["max_length"] ?? null;
        $this->container["min_length"] = $data["min_length"] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets avg_length
     *
     * @return float|null
     */
    public function getAvgLength()
    {
        return $this->container["avg_length"];
    }

    /**
     * Sets avg_length
     *
     * @param float|null $avg_length Average number of items in an array field.
     *
     * @return self
     */
    public function setAvgLength($avg_length)
    {
        $this->container["avg_length"] = $avg_length;

        return $this;
    }

    /**
     * Gets cardinality
     *
     * @return int|null
     */
    public function getCardinality()
    {
        return $this->container["cardinality"];
    }

    /**
     * Sets cardinality
     *
     * @param int|null $cardinality Cardinality is the number of different values in a field.
     *
     * @return self
     */
    public function setCardinality($cardinality)
    {
        $this->container["cardinality"] = $cardinality;

        return $this;
    }

    /**
     * Gets coverage
     *
     * @return int|null
     */
    public function getCoverage()
    {
        return $this->container["coverage"];
    }

    /**
     * Sets coverage
     *
     * @param int|null $coverage Coverage is the number of records which have a value set.
     *
     * @return self
     */
    public function setCoverage($coverage)
    {
        $this->container["coverage"] = $coverage;

        return $this;
    }

    /**
     * Gets max_length
     *
     * @return int|null
     */
    public function getMaxLength()
    {
        return $this->container["max_length"];
    }

    /**
     * Sets max_length
     *
     * @param int|null $max_length Maximum number of values in an array field.
     *
     * @return self
     */
    public function setMaxLength($max_length)
    {
        $this->container["max_length"] = $max_length;

        return $this;
    }

    /**
     * Gets min_length
     *
     * @return int|null
     */
    public function getMinLength()
    {
        return $this->container["min_length"];
    }

    /**
     * Sets min_length
     *
     * @param int|null $min_length Minimum length of an array field.
     *
     * @return self
     */
    public function setMinLength($min_length)
    {
        $this->container["min_length"] = $min_length;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
