<?php
/**
 * QueryCollectionResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@sajari.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sajari\Model;

use \ArrayAccess;
use Sajari\ObjectSerializer;

/**
 * QueryCollectionResponse Class Doc Comment
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class QueryCollectionResponse implements
    ModelInterface,
    ArrayAccess,
    \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "QueryCollectionResponse";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "aggregate_filters" => "map[string,\Sajari\Model\QueryAggregateResult]",
        "aggregates" => "map[string,\Sajari\Model\QueryAggregateResult]",
        "pipeline" => "\Sajari\Model\QueryCollectionResponsePipeline",
        "processing_duration" => "string",
        "results" => "\Sajari\Model\QueryResult[]",
        "total_size" => "string",
        "variables" => "map[string,object]",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "aggregate_filters" => null,
        "aggregates" => null,
        "pipeline" => null,
        "processing_duration" => null,
        "results" => null,
        "total_size" => "int64",
        "variables" => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "aggregate_filters" => "aggregate_filters",
        "aggregates" => "aggregates",
        "pipeline" => "pipeline",
        "processing_duration" => "processing_duration",
        "results" => "results",
        "total_size" => "total_size",
        "variables" => "variables",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "aggregate_filters" => "setAggregateFilters",
        "aggregates" => "setAggregates",
        "pipeline" => "setPipeline",
        "processing_duration" => "setProcessingDuration",
        "results" => "setResults",
        "total_size" => "setTotalSize",
        "variables" => "setVariables",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "aggregate_filters" => "getAggregateFilters",
        "aggregates" => "getAggregates",
        "pipeline" => "getPipeline",
        "processing_duration" => "getProcessingDuration",
        "results" => "getResults",
        "total_size" => "getTotalSize",
        "variables" => "getVariables",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container["aggregate_filters"] =
            $data["aggregate_filters"] ?? null;
        $this->container["aggregates"] = $data["aggregates"] ?? null;
        $this->container["pipeline"] = $data["pipeline"] ?? null;
        $this->container["processing_duration"] =
            $data["processing_duration"] ?? null;
        $this->container["results"] = $data["results"] ?? null;
        $this->container["total_size"] = $data["total_size"] ?? null;
        $this->container["variables"] = $data["variables"] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets aggregate_filters
     *
     * @return map[string,\Sajari\Model\QueryAggregateResult]|null
     */
    public function getAggregateFilters()
    {
        return $this->container["aggregate_filters"];
    }

    /**
     * Sets aggregate_filters
     *
     * @param map[string,\Sajari\Model\QueryAggregateResult]|null $aggregate_filters The aggregates run with filters.
     *
     * @return self
     */
    public function setAggregateFilters($aggregate_filters)
    {
        $this->container["aggregate_filters"] = $aggregate_filters;

        return $this;
    }

    /**
     * Gets aggregates
     *
     * @return map[string,\Sajari\Model\QueryAggregateResult]|null
     */
    public function getAggregates()
    {
        return $this->container["aggregates"];
    }

    /**
     * Sets aggregates
     *
     * @param map[string,\Sajari\Model\QueryAggregateResult]|null $aggregates The aggregates returned by the query.
     *
     * @return self
     */
    public function setAggregates($aggregates)
    {
        $this->container["aggregates"] = $aggregates;

        return $this;
    }

    /**
     * Gets pipeline
     *
     * @return \Sajari\Model\QueryCollectionResponsePipeline|null
     */
    public function getPipeline()
    {
        return $this->container["pipeline"];
    }

    /**
     * Sets pipeline
     *
     * @param \Sajari\Model\QueryCollectionResponsePipeline|null $pipeline pipeline
     *
     * @return self
     */
    public function setPipeline($pipeline)
    {
        $this->container["pipeline"] = $pipeline;

        return $this;
    }

    /**
     * Gets processing_duration
     *
     * @return string|null
     */
    public function getProcessingDuration()
    {
        return $this->container["processing_duration"];
    }

    /**
     * Sets processing_duration
     *
     * @param string|null $processing_duration The total time taken to perform the query.
     *
     * @return self
     */
    public function setProcessingDuration($processing_duration)
    {
        $this->container["processing_duration"] = $processing_duration;

        return $this;
    }

    /**
     * Gets results
     *
     * @return \Sajari\Model\QueryResult[]|null
     */
    public function getResults()
    {
        return $this->container["results"];
    }

    /**
     * Sets results
     *
     * @param \Sajari\Model\QueryResult[]|null $results The results returned by the query.
     *
     * @return self
     */
    public function setResults($results)
    {
        $this->container["results"] = $results;

        return $this;
    }

    /**
     * Gets total_size
     *
     * @return string|null
     */
    public function getTotalSize()
    {
        return $this->container["total_size"];
    }

    /**
     * Sets total_size
     *
     * @param string|null $total_size The total number of results that match the query.
     *
     * @return self
     */
    public function setTotalSize($total_size)
    {
        $this->container["total_size"] = $total_size;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return map[string,object]|null
     */
    public function getVariables()
    {
        return $this->container["variables"];
    }

    /**
     * Sets variables
     *
     * @param map[string,object]|null $variables The modified variables returned by the pipeline after it has finished processing.
     *
     * @return self
     */
    public function setVariables($variables)
    {
        $this->container["variables"] = $variables;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
