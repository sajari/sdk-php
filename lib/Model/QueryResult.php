<?php
/**
 * QueryResult
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Search.io API
 *
 * The version of the OpenAPI document: 4.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sajari\Model;

use \ArrayAccess;
use Sajari\ObjectSerializer;

/**
 * QueryResult Class Doc Comment
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class QueryResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "QueryResult";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "banner" => "\Sajari\Model\Banner",
        "feature_score" => "double",
        "index_score" => "double",
        "neural_score" => "double",
        "record" => "object",
        "relevance_score" => "double",
        "score" => "double",
        "token" => "\Sajari\Model\QueryResultToken",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "banner" => null,
        "feature_score" => "double",
        "index_score" => "double",
        "neural_score" => "double",
        "record" => null,
        "relevance_score" => "double",
        "score" => "double",
        "token" => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "banner" => "banner",
        "feature_score" => "feature_score",
        "index_score" => "index_score",
        "neural_score" => "neural_score",
        "record" => "record",
        "relevance_score" => "relevance_score",
        "score" => "score",
        "token" => "token",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "banner" => "setBanner",
        "feature_score" => "setFeatureScore",
        "index_score" => "setIndexScore",
        "neural_score" => "setNeuralScore",
        "record" => "setRecord",
        "relevance_score" => "setRelevanceScore",
        "score" => "setScore",
        "token" => "setToken",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "banner" => "getBanner",
        "feature_score" => "getFeatureScore",
        "index_score" => "getIndexScore",
        "neural_score" => "getNeuralScore",
        "record" => "getRecord",
        "relevance_score" => "getRelevanceScore",
        "score" => "getScore",
        "token" => "getToken",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container["banner"] = $data["banner"] ?? null;
        $this->container["feature_score"] = $data["feature_score"] ?? null;
        $this->container["index_score"] = $data["index_score"] ?? null;
        $this->container["neural_score"] = $data["neural_score"] ?? null;
        $this->container["record"] = $data["record"] ?? null;
        $this->container["relevance_score"] = $data["relevance_score"] ?? null;
        $this->container["score"] = $data["score"] ?? null;
        $this->container["token"] = $data["token"] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets banner
     *
     * @return \Sajari\Model\Banner|null
     */
    public function getBanner()
    {
        return $this->container["banner"];
    }

    /**
     * Sets banner
     *
     * @param \Sajari\Model\Banner|null $banner banner
     *
     * @return self
     */
    public function setBanner($banner)
    {
        $this->container["banner"] = $banner;

        return $this;
    }

    /**
     * Gets feature_score
     *
     * @return double|null
     */
    public function getFeatureScore()
    {
        return $this->container["feature_score"];
    }

    /**
     * Sets feature_score
     *
     * @param double|null $feature_score The feature score of the result.  This is a value between 0 and 1 representing the business-specific ranking of the result as determined by the ranking adjustments. See [Ranking adjustments](https://docs.search.io/documentation/fundamentals/search-settings/ranking-adjustments) for more information.
     *
     * @return self
     */
    public function setFeatureScore($feature_score)
    {
        $this->container["feature_score"] = $feature_score;

        return $this;
    }

    /**
     * Gets index_score
     *
     * @return double|null
     */
    public function getIndexScore()
    {
        return $this->container["index_score"];
    }

    /**
     * Sets index_score
     *
     * @param double|null $index_score The index score of the result.  This is a value between 0 and 1 representing the relevance of the result using traditional keyword search. The higher the score the more relevant the result is.
     *
     * @return self
     */
    public function setIndexScore($index_score)
    {
        $this->container["index_score"] = $index_score;

        return $this;
    }

    /**
     * Gets neural_score
     *
     * @return double|null
     */
    public function getNeuralScore()
    {
        return $this->container["neural_score"];
    }

    /**
     * Sets neural_score
     *
     * @param double|null $neural_score The neural score of the result.  This is a value between 0 and 1 representing the relevance of the result using NeuralsearchÂ®, using AI-based search.
     *
     * @return self
     */
    public function setNeuralScore($neural_score)
    {
        $this->container["neural_score"] = $neural_score;

        return $this;
    }

    /**
     * Gets record
     *
     * @return object|null
     */
    public function getRecord()
    {
        return $this->container["record"];
    }

    /**
     * Sets record
     *
     * @param object|null $record An object made up of field-value pairs that contains the record data.
     *
     * @return self
     */
    public function setRecord($record)
    {
        $this->container["record"] = $record;

        return $this;
    }

    /**
     * Gets relevance_score
     *
     * @return double|null
     */
    public function getRelevanceScore()
    {
        return $this->container["relevance_score"];
    }

    /**
     * Sets relevance_score
     *
     * @param double|null $relevance_score The relevance score of the result.  This is the best of `index_score` and `neural_score` with any index boosts applied on top.
     *
     * @return self
     */
    public function setRelevanceScore($relevance_score)
    {
        $this->container["relevance_score"] = $relevance_score;

        return $this;
    }

    /**
     * Gets score
     *
     * @return double|null
     */
    public function getScore()
    {
        return $this->container["score"];
    }

    /**
     * Sets score
     *
     * @param double|null $score The overall relevance of the result.  This is a value between 0 and 1 that combines the index, neural and feature scores. The higher the score the more relevant the result is.
     *
     * @return self
     */
    public function setScore($score)
    {
        $this->container["score"] = $score;

        return $this;
    }

    /**
     * Gets token
     *
     * @return \Sajari\Model\QueryResultToken|null
     */
    public function getToken()
    {
        return $this->container["token"];
    }

    /**
     * Sets token
     *
     * @param \Sajari\Model\QueryResultToken|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container["token"] = $token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
