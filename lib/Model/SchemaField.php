<?php
/**
 * SchemaField
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Search.io API
 *
 * Search.io is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sajari\Model;

use \ArrayAccess;
use Sajari\ObjectSerializer;

/**
 * SchemaField Class Doc Comment
 *
 * @category Class
 * @description SchemaField defines the properties of a field in the schema.
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SchemaField implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "SchemaField";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "array" => "bool",
        "array_length" => "int",
        "description" => "string",
        "mode" => "\Sajari\Model\SchemaFieldMode",
        "name" => "string",
        "type" => "\Sajari\Model\SchemaFieldType",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "array" => null,
        "array_length" => "int32",
        "description" => null,
        "mode" => null,
        "name" => null,
        "type" => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "array" => "array",
        "array_length" => "array_length",
        "description" => "description",
        "mode" => "mode",
        "name" => "name",
        "type" => "type",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "array" => "setArray",
        "array_length" => "setArrayLength",
        "description" => "setDescription",
        "mode" => "setMode",
        "name" => "setName",
        "type" => "setType",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "array" => "getArray",
        "array_length" => "getArrayLength",
        "description" => "getDescription",
        "mode" => "getMode",
        "name" => "getName",
        "type" => "getType",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container["array"] = $data["array"] ?? null;
        $this->container["array_length"] = $data["array_length"] ?? null;
        $this->container["description"] = $data["description"] ?? null;
        $this->container["mode"] = $data["mode"] ?? null;
        $this->container["name"] = $data["name"] ?? null;
        $this->container["type"] = $data["type"] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container["mode"] === null) {
            $invalidProperties[] = "'mode' can't be null";
        }
        if ($this->container["name"] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container["type"] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets array
     *
     * @return bool|null
     */
    public function getArray()
    {
        return $this->container["array"];
    }

    /**
     * Sets array
     *
     * @param bool|null $array Array indicates if the field is an array of values.  For example, if `type` is string and `array` is `true`, then the field is an array of strings.
     *
     * @return self
     */
    public function setArray($array)
    {
        $this->container["array"] = $array;

        return $this;
    }

    /**
     * Gets array_length
     *
     * @return int|null
     */
    public function getArrayLength()
    {
        return $this->container["array_length"];
    }

    /**
     * Sets array_length
     *
     * @param int|null $array_length The required length of the array, if `array` is `true`.  This allows you to enforce that an array contains an exact number of items.  For example, to store a 2x2 vector, you could set `type` to float, `array` to `true` and `array_length` to `4`.
     *
     * @return self
     */
    public function setArrayLength($array_length)
    {
        $this->container["array_length"] = $array_length;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container["description"];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the field.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container["description"] = $description;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return \Sajari\Model\SchemaFieldMode
     */
    public function getMode()
    {
        return $this->container["mode"];
    }

    /**
     * Sets mode
     *
     * @param \Sajari\Model\SchemaFieldMode $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        $this->container["mode"] = $mode;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container["name"];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the field.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container["name"] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Sajari\Model\SchemaFieldType
     */
    public function getType()
    {
        return $this->container["type"];
    }

    /**
     * Sets type
     *
     * @param \Sajari\Model\SchemaFieldType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container["type"] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
