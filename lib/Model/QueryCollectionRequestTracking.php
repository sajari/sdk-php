<?php
/**
 * QueryCollectionRequestTracking
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sajari\Model;

use \ArrayAccess;
use Sajari\ObjectSerializer;

/**
 * QueryCollectionRequestTracking Class Doc Comment
 *
 * @category Class
 * @package  Sajari
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class QueryCollectionRequestTracking implements
    ModelInterface,
    ArrayAccess,
    \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "QueryCollectionRequestTracking";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "data" => "map[string,string]",
        "field" => "string",
        "query_id" => "string",
        "sequence" => "int",
        "type" => "\Sajari\Model\QueryCollectionRequestTrackingType",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "data" => null,
        "field" => null,
        "query_id" => null,
        "sequence" => "int32",
        "type" => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "data" => "data",
        "field" => "field",
        "query_id" => "query_id",
        "sequence" => "sequence",
        "type" => "type",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "data" => "setData",
        "field" => "setField",
        "query_id" => "setQueryId",
        "sequence" => "setSequence",
        "type" => "setType",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "data" => "getData",
        "field" => "getField",
        "query_id" => "getQueryId",
        "sequence" => "getSequence",
        "type" => "getType",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container["data"] = $data["data"] ?? null;
        $this->container["field"] = $data["field"] ?? null;
        $this->container["query_id"] = $data["query_id"] ?? null;
        $this->container["sequence"] = $data["sequence"] ?? null;
        $this->container["type"] = $data["type"] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets data
     *
     * @return map[string,string]|null
     */
    public function getData()
    {
        return $this->container["data"];
    }

    /**
     * Sets data
     *
     * @param map[string,string]|null $data A set of custom values to be included in tracking data.
     *
     * @return self
     */
    public function setData($data)
    {
        $this->container["data"] = $data;

        return $this;
    }

    /**
     * Gets field
     *
     * @return string|null
     */
    public function getField()
    {
        return $this->container["field"];
    }

    /**
     * Sets field
     *
     * @param string|null $field The tracking field used to identify records in the collection.  Must be unique schema field.
     *
     * @return self
     */
    public function setField($field)
    {
        $this->container["field"] = $field;

        return $this;
    }

    /**
     * Gets query_id
     *
     * @return string|null
     */
    public function getQueryId()
    {
        return $this->container["query_id"];
    }

    /**
     * Sets query_id
     *
     * @param string|null $query_id The query ID of the query. If this is empty, then one is generated.
     *
     * @return self
     */
    public function setQueryId($query_id)
    {
        $this->container["query_id"] = $query_id;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return int|null
     */
    public function getSequence()
    {
        return $this->container["sequence"];
    }

    /**
     * Sets sequence
     *
     * @param int|null $sequence The sequence number of query.
     *
     * @return self
     */
    public function setSequence($sequence)
    {
        $this->container["sequence"] = $sequence;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Sajari\Model\QueryCollectionRequestTrackingType|null
     */
    public function getType()
    {
        return $this->container["type"];
    }

    /**
     * Sets type
     *
     * @param \Sajari\Model\QueryCollectionRequestTrackingType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container["type"] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
